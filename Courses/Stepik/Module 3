## Основы программирования в R
### Модуль 3: продвинутое программирование
#### Функции
> 
**Задачи:**  
**1:** *Пусть функция decorate_string действует поверх функции paste, дополнительно приклеивая к результату аргумент pattern. При этом этот аргумент должен быть присоединён как в начале строки (строк), так и в конце, но перевёрнутый задом наперёд.
decorate_string(pattern = "123", "abc")            # "123abc321"
Обратите внимание, что функция decorate_string должна помнить про аргументы для paste и правильно на них реагировать:
decorate_string(pattern = "123", "abc", "def", sep = "+")    # "123abc+def321"*

```{r}
decorate_string <- function(pattern, ...) {
  library(stringi)
  return(paste0(pattern, paste(...), stri_reverse(pattern)))
}
```

**2:** *Давайте напишем бинарный оператор! Пусть %+% действует на два числовых вектора, складывая их поэлементно, но без учёта правил переписывания: если длина векторов различна, то возвращаем вектор большей длины, но с пропущенными значениями в конце.*

```{r}
"%+%" <- function(x, y) {
  length(x) = length(y) = max(length(x), length(y))
  return(x + y)
}
```


